<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.company.crm.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="realname" property="realname" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="tel" property="tel" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="inputtime" property="inputtime" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="BIT" />
    <result column="admin" property="admin" jdbcType="BIT" />
    <association property="dept" javaType="Department" columnPrefix="d_">
    	<result property="id" column="id" />
		<result property="name" column="name" />
    </association>  
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="Employee" useGeneratedKeys="true" keyProperty="id" >
    insert into employee (username, realname, password, 
      tel, email, dept_id, 
      inputtime, state, admin
      )
    values (#{username,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{tel,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{dept.id,jdbcType=BIGINT}, 
      #{inputtime,jdbcType=TIMESTAMP}, #{state,jdbcType=BIT}, #{admin,jdbcType=TINYINT}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="Employee" >
    update employee
    set username = #{username,jdbcType=VARCHAR},
      realname = #{realname,jdbcType=VARCHAR},
      <!--解决数据丢失问题 -->
      <if test="password != null">
     	 password = #{password,jdbcType=VARCHAR},
      </if>
      tel = #{tel,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      dept_id = #{dept.id,jdbcType=BIGINT},
      inputtime = #{inputtime,jdbcType=TIMESTAMP},
       <if test="state != null">
      	state = #{state,jdbcType=BIT},
      </if>
      admin = #{admin,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, username, realname, password, tel, email, dept_id, inputtime, state, admin
    from employee
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select e.id, e.username, e.realname, e.tel, e.email, e.inputtime, e.state, e.admin,
    d.id as d_id,d.name as d_name
    from employee e left join department d on (e.dept_id = d.id)
  </select>
  <!-- 登录 -->
  <select id="getEmployeeForlogin" resultMap="BaseResultMap">
  	select * from employee where username = #{username} and password = ${password}
  </select>
  
  <!-- 设置离职状态 -->
  <update id="updateState">
  	 update employee set state = 0 where id = #{id}
  </update>
  
  <sql id="where_sql">
  	<where>
  		<if test="keyword!=null">
  		  and (e.username like concat('%',${keyword},'%') 
  		  or e.tel like concat('%',${keyword},'%')) 
  		</if>
  	</where>
  </sql>
  
  <!-- 查询符合条件的记录数 -->
  <select id="queryPageResultCount" resultType="long">
  	  select count(e.id) from employee e
  	  <include refid="where_sql" />
  </select>
  
  <!-- 查询符合条件的结果集 -->
  <select id="queryPageResult" resultMap="BaseResultMap">
  	select e.id, e.username, e.realname, e.tel, e.email, e.inputtime, e.state, e.admin,
    d.id as d_id,d.name as d_name
    from employee e left join department d on (e.dept_id = d.id)
  	  <include refid="where_sql" />
  	  <if test="start != null">
  		 limit #{start},#{rows} 
  	  </if>
  </select>
  
  <insert id="insertRelation">
  	insert into employee_role (e_id,r_id) values (#{eId},#{rId})
  </insert>
  
  <select id="getRidByEid" resultType="long">
  	select r_id FROM employee_role where e_id = #{id}
  </select>
  
  <delete id="deleteRelation">
  	delete from employee_role where e_id = #{id}
  </delete>
  
  
  
</mapper>