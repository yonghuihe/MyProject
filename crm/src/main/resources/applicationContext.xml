<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	beans:javabean
		spring是一个放java对象的容器，把放在spring中的对象称之为javabean
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd">
		
	<!-- 开启第三方注解扫描 ，针对普通的bean-->	
	<context:component-scan base-package="com.company.crm"/>
	<!-- mapper扫描器，使用标签时需要设置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.company.crm.mapper"/>
	</bean>	
	
	<!-- 1、引入数据库配置文件 -->
	<context:property-placeholder location="classpath:db.properties" system-properties-mode="NEVER"/>
	<!-- 2、配置dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
	</bean>
	<!-- 3、创建SessionFactory -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 1、引入dataSource -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 2、MyBatis的配置文件路径 -->
		<property name="configLocation" value="classpath:mybatis.cfg.xml"/>
		<!-- 3、指定mapper文件的路径 -->
		<property name="mapperLocations" value="classpath:com/company/crm/mapper/*Mapper.xml"/>
		<!-- 4、指定需要设置别名的包 -->
		<property name="typeAliasesPackage" value="com.company.crm.domain,com.company.crm.query"/>
	</bean>
	<!-- 4、配置事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 5、事务模板 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="list*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="select*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="query*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 切面处理类 -->
	<bean id="logUtil" class="com.company.crm.util.SystemLogUtil"/>
	
	<!-- 6、aop配置 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.company.crm.service.*.*(..))" id="pc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
		<!-- 配置日志的aop切点与切面 -->
		<aop:aspect ref="logUtil">
			<aop:after method="writeLog" pointcut-ref="pc"/>
		</aop:aspect>
	</aop:config>
	
	
	<!-- 7、创建bean action service mapper(也可以直接使用注解) -->
	<!-- 配置mapper -->
	<!-- <bean id="xxxMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="sqlSessionFactory" ref="sessionFactory"/>
		<property name="mapperInterface" value="xxxMapper的全限定名"/>
	</bean> -->
	<!-- <bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="sqlSessionFactory" ref="sessionFactory"/>
		<property name="mapperInterface" value="com.company.sm.mapper.StudentMapper"/>
	</bean> -->
	<!-- 配置service实现类 -->
	<!-- <bean id="xxxService" class="service实现类全限定名">
		<property name="xxxMapper" ref="xxxMapper"/>
	</bean> -->
	<!-- <bean id="studentService" class="com.company.sm.service.impl.StudentServiceImpl">
		<property name="studentMapper" ref="studentMapper"/>
	</bean> -->
</beans>
