<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        ">
        

	<!-- ======================数据库连接池环境配置================================ -->
	<!-- 1、引入数据库资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- 2、配置连接池对象 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 2、配置SessionFactory -->
	<bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 1:连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 2:引入mybatis的主配置文件 -->
		<property name="configLocation" value="classpath:mybatis.cfg.xml"></property>
		<!-- 3:关联映射文件 mapper文件mapperLocations  mappingLocations -->
		<property name="mapperLocations" value="classpath:com/_520it/es/mapper/*Mapper.xml" />
		<!-- 4:指定别名的路径 ,即domain类-->
		<property name="typeAliasesPackage" value="com._520it.es.domain"></property>
	</bean>

	<!-- 3、配置事务（具体事务） -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 4、事务模版（对那些方法做哪些事务处理） -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 5、aop事务对那些类中的那些方法做处理(切入点) -->
	<aop:config>
		<aop:pointcut expression="execution(* com._520it.es.service.*.*(..))"
			id="txPoint" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	</aop:config>
	
	<!-- ====================注解的方式 ================================-->
	<!-- 开启注解扫描仪(注意扫描器写在这里，mvc里面不要开启扫描了，为了测试使用) -->
 	 <context:component-scan base-package="com._520it.es"/> 
	<!-- 使用mapper扫描器，直接使用mapper接口，不需要我们贴标签，使用的时候直接根据类型获取 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com._520it.es.mapper"></property>
	</bean> 
	
</beans>